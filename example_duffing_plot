import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

def duffing_oscillation():
    # Parameters
    amp = 0.42
    b = 0.5
    alpha = -1.0
    beta = 1.0
    w = 1.0

    # Time step and initial condition
    tspan = np.arange(0, 500, 0.1)
    x10 = 0.5021
    x20 = 0.17606
    y0 = [x10, x20]

    # Duffing oscillator equations
    def f(y, t, b, alpha, beta, amp, w):
        x1, x2 = y
        dx1 = x2
        dx2 = -b * x2 - alpha * x1 - beta * x1**3 + amp * np.sin(w * t)
        return [dx1, dx2]

    # Solve the Duffing oscillator
    y = odeint(f, y0, tspan, args=(b, alpha, beta, amp, w))
    x1 = y[:, 0]
    x2 = y[:, 1]

    # Create a colored 3D trajectory using lines
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    colormap = plt.cm.jet(np.linspace(0, 1, len(tspan)))
    
    for i in range(len(tspan) - 1):
        ax.plot(x1[i:i+2], x2[i:i+2], tspan[i:i+2], color=colormap[i], linewidth=1.5)
    
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Time')
    plt.title('Colored Duffing Oscillator Trajectory')
    plt.colorbar(plt.cm.ScalarMappable(cmap='jet'), ax=ax)
    plt.show()

duffing_oscillation()
